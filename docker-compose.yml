version: '3.6'
services:
  postgres:
    image: postgres:12
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
  bdjuno:
    image: glodnet/bdjuno
    restart: always
    ports:
      - 3000:3000
    command:
      - sh
      - -c
      - |
        set -ex
        bdjuno init --replace
        cat>/root/.bdjuno/config.yaml<<EOF
        chain:
            bech32_prefix: gnc
            modules:
                - modules
                - messages
                - auth
                - bank
                - consensus
                - gov
                - mint
                - pricefeed
                - slashing
                - staking
                - distribution
                - actions
        node:
            type: remote
            config:
                rpc:
                    client_name: juno
                    address: http://${NODE_HOST}:26657
                    max_connections: 20
                grpc:
                    address: http://${NODE_HOST}:9090
                    insecure: true
        parsing:
            workers: 1
            listen_new_blocks: true
            parse_old_blocks: true
            parse_genesis: true
            start_height: 1
            fast_sync: true
            genesis_file_path: /root/.bdjuno/genesis.json
            average_block_time: 3s
        database:
            name: ${POSTGRES_DB}
            host: postgres
            port: 5432
            user: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
            schema: public
            max_open_connections: 10
            max_idle_connections: 10
            partition_size: 100000
            partition_batch: 1000
        logging:
            level: debug
            format: text
        telemetry:
            port: 5000
            enabled: true
        pruning:
            keep_recent: 100
            keep_every: 500
            interval: 10
        pricefeed:
            tokens:
                - name: GNC
                  units:
                    - denom: ugnc
                      exponent: 0
                    - denom: gnc
                      exponent: 6
        actions:
            port: 3000
        EOF
        bdjuno start
    volumes:
      ## Modify first path to match configuration file.
      - ~/.bdjuno:/root/.bdjuno
    depends_on:
      - postgres
  graphql-engine:
    image: hasura/graphql-engine:v2.6.1
    restart: always
    ports:
      - 8080:8080
    environment:
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      ACTION_BASE_URL: http://bdjuno:3000
    volumes:
      - ./hasura:/root/hasura
    depends_on:
      - postgres
      - bdjuno
  hasura-cli:
    image: glodnet/hasura-cli
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://graphql-engine:8080
    command: metadata apply --project /hasuracli/project
    volumes:
      - ./hasura:/hasuracli/project
    depends_on:
      - graphql-engine
volumes:
  db_data: